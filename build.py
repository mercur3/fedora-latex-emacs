#!/usr/bin/python3

SUPPORTED_FEDORA_VERSIONS: list[int] = [37, 38, 39]
LATEX_CONFIG = ["base", "medium", "full"]
BASE_BUILD_DIR = "build"


def generate_dockerfiles(version: int, tag_base: str, tag_medium: str, tag_full: str) -> None:
    with open(f"{BASE_BUILD_DIR}/Dockerfile.{version}-base", "w") as fd:
        content = f"""
FROM fedora:{version}

###############################################################################
# WARNING                                                                     #
# This file is autogenerated. Do NOT edit this file. Run =./build.py= instead #
###############################################################################

# By default dnf is configured as a singletheaded application. This configuration aims to increase
# build speed as it spends less time doing I/O operations and connecting to the mirrors.
RUN rm /etc/dnf/dnf.conf
COPY dnf.conf /etc/dnf/
RUN dnf update --nodocs && \\
    dnf install --nodocs emacs-nox texlive-scheme-medium && \\
    dnf install "tex(datetime.sty)";

"""
        fd.write(content)

    with open(f"{BASE_BUILD_DIR}/Dockerfile.{version}-medium", "w") as fd:
        content = f"""
FROM {tag_base}

###############################################################################
# WARNING                                                                     #
# This file is autogenerated. Do NOT edit this file. Run =./build.py= instead #
###############################################################################

LABEL description="Fedora + texlive-medium + Emacs. Can be used to build LaTeX documents with org-mode"
LABEL repository="https://gitlab.com/mercur3-dockerfiles/fedora-latex-emacs.git"
LABEL readme="README.org"

RUN dnf clean all && \\
    rm -rf /var/log /tmp;

"""
        fd.write(content)

    with open(f"{BASE_BUILD_DIR}/Dockerfile.{version}-full", "w") as fd:
        content = f"""
FROM {tag_base}

###############################################################################
# WARNING                                                                     #
# This file is autogenerated. Do NOT edit this file. Run =./build.py= instead #
###############################################################################

LABEL description="Fedora + texlive-full + Emacs. Can be used to build LaTeX documents with org-mode"
LABEL repository="https://gitlab.com/mercur3-dockerfiles/fedora-latex-emacs.git"
LABEL readme="README.org"

RUN dnf install --nodocs texlive-scheme-full && \\
    dnf clean all && \\
    rm -rf /var/log /tmp;

"""
        fd.write(content)


def main() -> None:
    output = """
###############################################################################
# WARNING                                                                     #
# This file is autogenerated. Do NOT edit this file. Run =./build.py= instead #
###############################################################################

trigger:
  - master
pr:
  autoCancel: true
  branches:
    include:
      - master
pool:
  vmImage: ubuntu-latest
jobs:"""
    for f in SUPPORTED_FEDORA_VERSIONS:
        # params
        dockerfile_base = f"Dockerfile.{f}-base"
        dockerfile_medium = f"Dockerfile.{f}-medium"
        dockerfile_full = f"Dockerfile.{f}-full"

        tag_base = f"mercur3/fedora-latex-emacs:{f}-base"
        tag_medium = f"mercur3/fedora-latex-emacs:{f}-medium"
        tag_full = f"mercur3/fedora-latex-emacs:{f}-full"

        # build =Dockerfile=
        generate_dockerfiles(f, tag_base, tag_medium, tag_full)

        # build =azure_pipelines.yml=
        output += f"""
  - job:
    displayName: Building on Fedora {f}
    pool:
      vmImage: ubuntu-latest
    steps:
      - script: |
          echo "Building the images"
          printf "Using %d threads\\n" $(nproc)
          cd {BASE_BUILD_DIR}
          echo "------------------------------------------------------\\n"
          docker build -f {dockerfile_base}   -t {tag_base}   .
          docker build -f {dockerfile_medium} -t {tag_medium} .
          docker build -f {dockerfile_full}   -t {tag_full}   .
          echo "------------------------------------------------------\\n"
        displayName: docker build -f Dockerfile -t mercur3/__tag_name__ .

      - script: |
          echo "------------------------------------------------------\\n"
          echo "$DOCKER_PASSWORD" | docker login -u mercur3 --password-stdin
          docker push {tag_medium}
          docker push {tag_full}
        displayName: docker push mercur3/__tag_name__
        condition: not(eq(variables['Build.Reason'], 'PullRequest'))
        env:
          DOCKER_PASSWORD: $(DOCKER_PASSWORD)

"""
    with open("azure-pipelines.yml", "w") as fd:
        output += "\n"
        print(output)
        fd.write(output)


if __name__ == "__main__":
    main()

